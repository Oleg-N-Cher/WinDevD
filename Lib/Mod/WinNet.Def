MODULE WinNet;
(**
	project	= "BlackBox"
	organization	= "www.oberon.ch"
	contributors	= "Oberon microsystems"
	version	= "System/Rsrc/About"
	copyright	= "System/Rsrc/About"
	license	= "Docu/BB-License"
	changes	= ""
	issues	= ""

**)

	IMPORT SYSTEM, WinApi;

	CONST (* macros *)
		INVALID_SOCKET* = -1;
		WNNC_NET_MSNET* = 65536;
		WNNC_NET_LANMAN* = 131072;
		WNNC_NET_NETWARE* = 196608;
		WNNC_NET_VINES* = 262144;
		WNNC_NET_10NET* = 327680;
		WNNC_NET_LOCUS* = 393216;
		WNNC_NET_SUN_PC_NFS* = 458752;
		WNNC_NET_LANSTEP* = 524288;
		WNNC_NET_9TILES* = 589824;
		WNNC_NET_LANTASTIC* = 655360;
		WNNC_NET_AS400* = 720896;
		WNNC_NET_FTP_NFS* = 786432;
		WNNC_NET_PATHWORKS* = 851968;
		WNNC_NET_LIFENET* = 917504;
		WNNC_NET_POWERLAN* = 983040;
		WNNC_NET_BWNFS* = 1048576;
		WNNC_NET_COGENT* = 1114112;
		WNNC_NET_FARALLON* = 1179648;
		WNNC_NET_APPLETALK* = 1245184;
		RESOURCE_CONNECTED* = 1;
		RESOURCE_GLOBALNET* = 2;
		RESOURCE_REMEMBERED* = 3;
		RESOURCE_RECENT* = 4;
		RESOURCE_CONTEXT* = 5;
		RESOURCETYPE_ANY* = 0;
		RESOURCETYPE_DISK* = 1;
		RESOURCETYPE_PRINT* = 2;
		RESOURCETYPE_RESERVED* = 8;
		RESOURCETYPE_UNKNOWN* = -1;
		RESOURCEUSAGE_CONNECTABLE* = 1;
		RESOURCEUSAGE_CONTAINER* = 2;
		RESOURCEUSAGE_NOLOCALDEVICE* = 4;
		RESOURCEUSAGE_SIBLING* = 8;
		RESOURCEUSAGE_ALL* = 3;
		RESOURCEUSAGE_RESERVED* = 80000000H;
		RESOURCEDISPLAYTYPE_GENERIC* = 0;
		RESOURCEDISPLAYTYPE_DOMAIN* = 1;
		RESOURCEDISPLAYTYPE_SERVER* = 2;
		RESOURCEDISPLAYTYPE_SHARE* = 3;
		RESOURCEDISPLAYTYPE_FILE* = 4;
		RESOURCEDISPLAYTYPE_GROUP* = 5;
		RESOURCEDISPLAYTYPE_NETWORK* = 6;
		RESOURCEDISPLAYTYPE_ROOT* = 7;
		RESOURCEDISPLAYTYPE_SHAREADMIN* = 8;
		RESOURCEDISPLAYTYPE_DIRECTORY* = 9;
		RESOURCEDISPLAYTYPE_TREE* = 10;
		NETPROPERTY_PERSISTENT* = 1;
		CONNECT_UPDATE_PROFILE* = {0};
		CONNECT_UPDATE_RECENT* = {1};
		CONNECT_TEMPORARY* = {2};
		CONNECT_INTERACTIVE* = {3};
		CONNECT_PROMPT* = {4};
		CONNECT_NEED_DRIVE* = {5};
		CONNECT_REFCOUNT* = {6};
		CONNECT_REDIRECT* = {7};
		CONNECT_LOCALDRIVE* = {8};
		CONNECT_CURRENT_MEDIA* = {9};
		CONNDLG_RO_PATH* = {0};
		CONNDLG_CONN_POINT* = {1};
		CONNDLG_USE_MRU* = {2};
		CONNDLG_HIDE_BOX* = {3};
		CONNDLG_PERSIST* = {4};
		CONNDLG_NOT_PERSIST* = {5};
		DISC_UPDATE_PROFILE* = 1;
		DISC_NO_FORCE* = 64;
		UNIVERSAL_NAME_INFO_LEVEL* = 1;
		REMOTE_NAME_INFO_LEVEL* = 2;
		WNFMT_MULTILINE* = {0};
		WNFMT_ABBREVIATED* = {1};
		WNFMT_INENUM* = {4};
		WNFMT_CONNECTION* = {5};
		NETINFO_DLL16* = {0};
		NETINFO_DISKRED* = {2};
		NETINFO_PRINTERRED* = {3};
		RP_LOGON* = 1;
		RP_INIFILE* = 2;
		PP_DISPLAYERRORS* = 1;
		WN_SUCCESS* = 0;
		WN_NO_ERROR* = 0;
		WN_NOT_SUPPORTED* = 50;
		WN_CANCEL* = 1223;
		WN_RETRY* = 1237;
		WN_NET_ERROR* = 59;
		WN_MORE_DATA* = 234;
		WN_BAD_POINTER* = 487;
		WN_BAD_VALUE* = 87;
		WN_BAD_USER* = 2202;
		WN_BAD_PASSWORD* = 86;
		WN_ACCESS_DENIED* = 5;
		WN_FUNCTION_BUSY* = 170;
		WN_WINDOWS_ERROR* = 59;
		WN_OUT_OF_MEMORY* = 8;
		WN_NO_NETWORK* = 1222;
		WN_EXTENDED_ERROR* = 1208;
		WN_BAD_LEVEL* = 124;
		WN_BAD_HANDLE* = 6;
		WN_NOT_INITIALIZING* = 1247;
		WN_NO_MORE_DEVICES* = 1248;
		WN_NOT_CONNECTED* = 2250;
		WN_OPEN_FILES* = 2401;
		WN_DEVICE_IN_USE* = 2404;
		WN_BAD_NETNAME* = 67;
		WN_BAD_LOCALNAME* = 1200;
		WN_ALREADY_CONNECTED* = 85;
		WN_DEVICE_ERROR* = 31;
		WN_CONNECTION_CLOSED* = 1201;
		WN_NO_NET_OR_BAD_PATH* = 1203;
		WN_BAD_PROVIDER* = 1204;
		WN_CANNOT_OPEN_PROFILE* = 1205;
		WN_BAD_PROFILE* = 1206;
		WN_BAD_DEV_TYPE* = 66;
		WN_DEVICE_ALREADY_REMEMBERED* = 1202;
		WN_NO_MORE_ENTRIES* = 259;
		WN_NOT_CONTAINER* = 1207;
		WN_NOT_AUTHENTICATED* = 1244;
		WN_NOT_LOGGED_ON* = 1245;
		WN_NOT_VALIDATED* = 1311;
		WNCON_FORNETCARD* = 1;
		WNCON_NOTROUTED* = 2;
		WNCON_SLOWLINK* = 4;
		WNCON_DYNAMIC* = 8;
		NCBNAMSZ* = 16;
		MAX_LANA* = 254;
		NAME_FLAGS_MASK* = 135;
		GROUP_NAME* = 128;
		UNIQUE_NAME* = 0;
		REGISTERING* = 0;
		REGISTERED* = 4;
		DEREGISTERED* = 5;
		DUPLICATE* = 6;
		DUPLICATE_DEREG* = 7;
		LISTEN_OUTSTANDING* = 1;
		CALL_PENDING* = 2;
		SESSION_ESTABLISHED* = 3;
		HANGUP_PENDING* = 4;
		HANGUP_COMPLETE* = 5;
		SESSION_ABORTED* = 6;
		ALL_TRANSPORTS* = "M";
		MS_NBF* = "MNBF";
		NCBCALL* = 16;
		NCBLISTEN* = 17;
		NCBHANGUP* = 18;
		NCBSEND* = 20;
		NCBRECV* = 21;
		NCBRECVANY* = 22;
		NCBCHAINSEND* = 23;
		NCBDGSEND* = 32;
		NCBDGRECV* = 33;
		NCBDGSENDBC* = 34;
		NCBDGRECVBC* = 35;
		NCBADDNAME* = 48;
		NCBDELNAME* = 49;
		NCBRESET* = 50;
		NCBASTAT* = 51;
		NCBSSTAT* = 52;
		NCBCANCEL* = 53;
		NCBADDGRNAME* = 54;
		NCBENUM* = 55;
		NCBUNLINK* = 112;
		NCBSENDNA* = 113;
		NCBCHAINSENDNA* = 114;
		NCBLANSTALERT* = 115;
		NCBACTION* = 119;
		NCBFINDNAME* = 120;
		NCBTRACE* = 121;
		ASYNCH* = 128;
		NRC_GOODRET* = 0;
		NRC_BUFLEN* = 1;
		NRC_ILLCMD* = 3;
		NRC_CMDTMO* = 5;
		NRC_INCOMP* = 6;
		NRC_BADDR* = 7;
		NRC_SNUMOUT* = 8;
		NRC_NORES* = 9;
		NRC_SCLOSED* = 10;
		NRC_CMDCAN* = 11;
		NRC_DUPNAME* = 13;
		NRC_NAMTFUL* = 14;
		NRC_ACTSES* = 15;
		NRC_LOCTFUL* = 17;
		NRC_REMTFUL* = 18;
		NRC_ILLNN* = 19;
		NRC_NOCALL* = 20;
		NRC_NOWILD* = 21;
		NRC_INUSE* = 22;
		NRC_NAMERR* = 23;
		NRC_SABORT* = 24;
		NRC_NAMCONF* = 25;
		NRC_IFBUSY* = 33;
		NRC_TOOMANY* = 34;
		NRC_BRIDGE* = 35;
		NRC_CANOCCR* = 36;
		NRC_CANCEL* = 38;
		NRC_DUPENV* = 48;
		NRC_ENVNOTDEF* = 52;
		NRC_OSRESNOTAV* = 53;
		NRC_MAXAPPS* = 54;
		NRC_NOSAPS* = 55;
		NRC_NORESOURCES* = 56;
		NRC_INVADDRESS* = 57;
		NRC_INVDDID* = 59;
		NRC_LOCKFAIL* = 60;
		NRC_OPENERR* = 63;
		NRC_SYSTEM* = 64;
		NRC_PENDING* = 255;
		INCL_WINSOCK_API_PROTOTYPES* = 1;
		INCL_WINSOCK_API_TYPEDEFS* = 0;
		FD_SETSIZE* = 64;
		IOCPARM_MASK* = 127;
		IOC_VOID* = 536870912;
		IOC_OUT* = 1073741824;
		IOC_IN* = 80000000H;
		IOC_INOUT* = -1073741824;
		IPPROTO_IP* = 0;
		IPPROTO_ICMP* = 1;
		IPPROTO_IGMP* = 2;
		IPPROTO_GGP* = 3;
		IPPROTO_TCP* = 6;
		IPPROTO_PUP* = 12;
		IPPROTO_UDP* = 17;
		IPPROTO_IDP* = 22;
		IPPROTO_ND* = 77;
		IPPROTO_RAW* = 255;
		IPPROTO_MAX* = 256;
		IPPORT_ECHO* = 7;
		IPPORT_DISCARD* = 9;
		IPPORT_SYSTAT* = 11;
		IPPORT_DAYTIME* = 13;
		IPPORT_NETSTAT* = 15;
		IPPORT_FTP* = 21;
		IPPORT_TELNET* = 23;
		IPPORT_SMTP* = 25;
		IPPORT_TIMESERVER* = 37;
		IPPORT_NAMESERVER* = 42;
		IPPORT_WHOIS* = 43;
		IPPORT_MTP* = 57;
		IPPORT_TFTP* = 69;
		IPPORT_RJE* = 77;
		IPPORT_FINGER* = 79;
		IPPORT_TTYLINK* = 87;
		IPPORT_SUPDUP* = 95;
		IPPORT_EXECSERVER* = 512;
		IPPORT_LOGINSERVER* = 513;
		IPPORT_CMDSERVER* = 514;
		IPPORT_EFSSERVER* = 520;
		IPPORT_BIFFUDP* = 512;
		IPPORT_WHOSERVER* = 513;
		IPPORT_ROUTESERVER* = 520;
		IPPORT_RESERVED* = 1024;
		IMPLINK_IP* = 155;
		IMPLINK_LOWEXPER* = 156;
		IMPLINK_HIGHEXPER* = 158;
		IN_CLASSA_NET* = -16777216;
		IN_CLASSA_NSHIFT* = 24;
		IN_CLASSA_HOST* = 16777215;
		IN_CLASSA_MAX* = 128;
		IN_CLASSB_NET* = -65536;
		IN_CLASSB_NSHIFT* = 16;
		IN_CLASSB_HOST* = 65535;
		IN_CLASSB_MAX* = 65536;
		IN_CLASSC_NET* = -256;
		IN_CLASSC_NSHIFT* = 8;
		IN_CLASSC_HOST* = 255;
		IN_CLASSD_NET* = -268435456;
		IN_CLASSD_NSHIFT* = 28;
		IN_CLASSD_HOST* = 268435455;
		INADDR_ANY* = 0;
		INADDR_LOOPBACK* = 2130706433;
		INADDR_NONE* = -1;
		WSADESCRIPTION_LEN* = 256;
		WSASYS_STATUS_LEN* = 128;
		SOCKET_ERROR* = -1;
		SOCK_STREAM* = 1;
		SOCK_DGRAM* = 2;
		SOCK_RAW* = 3;
		SOCK_RDM* = 4;
		SOCK_SEQPACKET* = 5;
		SO_DEBUG* = 1;
		SO_ACCEPTCONN* = 2;
		SO_REUSEADDR* = 4;
		SO_KEEPALIVE* = 8;
		SO_DONTROUTE* = 16;
		SO_BROADCAST* = 32;
		SO_USELOOPBACK* = 64;
		SO_LINGER* = 128;
		SO_OOBINLINE* = 256;
		SO_DONTLINGER* = -129;
		SO_SNDBUF* = 4097;
		SO_RCVBUF* = 4098;
		SO_SNDLOWAT* = 4099;
		SO_RCVLOWAT* = 4100;
		SO_SNDTIMEO* = 4101;
		SO_RCVTIMEO* = 4102;
		SO_ERROR* = 4103;
		SO_TYPE* = 4104;
		SO_GROUP_ID* = 8193;
		SO_GROUP_PRIORITY* = 8194;
		SO_MAX_MSG_SIZE* = 8195;
		SO_PROTOCOL_INFOA* = 8196;
		SO_PROTOCOL_INFOW* = 8197;
		SO_PROTOCOL_INFO* = 8196;
		PVD_CONFIG* = 12289;
		TCP_NODELAY* = 1;
		AF_UNSPEC* = 0;
		AF_UNIX* = 1;
		AF_INET* = 2;
		AF_IMPLINK* = 3;
		AF_PUP* = 4;
		AF_CHAOS* = 5;
		AF_NS* = 6;
		AF_IPX* = 6;
		AF_ISO* = 7;
		AF_OSI* = 7;
		AF_ECMA* = 8;
		AF_DATAKIT* = 9;
		AF_CCITT* = 10;
		AF_SNA* = 11;
		AF_DECnet* = 12;
		AF_DLI* = 13;
		AF_LAT* = 14;
		AF_HYLINK* = 15;
		AF_APPLETALK* = 16;
		AF_NETBIOS* = 17;
		AF_VOICEVIEW* = 18;
		AF_FIREFOX* = 19;
		AF_UNKNOWN1* = 20;
		AF_BAN* = 21;
		AF_ATM* = 22;
		AF_MAX* = 23;
		PF_UNSPEC* = 0;
		PF_UNIX* = 1;
		PF_INET* = 2;
		PF_IMPLINK* = 3;
		PF_PUP* = 4;
		PF_CHAOS* = 5;
		PF_NS* = 6;
		PF_IPX* = 6;
		PF_ISO* = 7;
		PF_OSI* = 7;
		PF_ECMA* = 8;
		PF_DATAKIT* = 9;
		PF_CCITT* = 10;
		PF_SNA* = 11;
		PF_DECnet* = 12;
		PF_DLI* = 13;
		PF_LAT* = 14;
		PF_HYLINK* = 15;
		PF_APPLETALK* = 16;
		PF_VOICEVIEW* = 18;
		PF_FIREFOX* = 19;
		PF_UNKNOWN1* = 20;
		PF_BAN* = 21;
		PF_ATM* = 22;
		PF_MAX* = 23;
		SOL_SOCKET* = 65535;
		SOMAXCONN* = 5;
		MSG_OOB* = 1;
		MSG_PEEK* = 2;
		MSG_DONTROUTE* = 4;
		MSG_PARTIAL* = 32768;
		MSG_INTERRUPT* = 16;
		MSG_MAXIOVLEN* = 16;
		MAXGETHOSTSTRUCT* = 1024;
		FD_READ_BIT* = 0;
		FD_READ* = 1;
		FD_WRITE_BIT* = 1;
		FD_WRITE* = 2;
		FD_OOB_BIT* = 2;
		FD_OOB* = 4;
		FD_ACCEPT_BIT* = 3;
		FD_ACCEPT* = 8;
		FD_CONNECT_BIT* = 4;
		FD_CONNECT* = 16;
		FD_CLOSE_BIT* = 5;
		FD_CLOSE* = 32;
		FD_QOS_BIT* = 6;
		FD_QOS* = 64;
		FD_GROUP_QOS_BIT* = 7;
		FD_GROUP_QOS* = 128;
		FD_MAX_EVENTS* = 8;
		FD_ALL_EVENTS* = 255;
		WSABASEERR* = 10000;
		WSAEINTR* = 10004;
		WSAEBADF* = 10009;
		WSAEACCES* = 10013;
		WSAEFAULT* = 10014;
		WSAEINVAL* = 10022;
		WSAEMFILE* = 10024;
		WSAEWOULDBLOCK* = 10035;
		WSAEINPROGRESS* = 10036;
		WSAEALREADY* = 10037;
		WSAENOTSOCK* = 10038;
		WSAEDESTADDRREQ* = 10039;
		WSAEMSGSIZE* = 10040;
		WSAEPROTOTYPE* = 10041;
		WSAENOPROTOOPT* = 10042;
		WSAEPROTONOSUPPORT* = 10043;
		WSAESOCKTNOSUPPORT* = 10044;
		WSAEOPNOTSUPP* = 10045;
		WSAEPFNOSUPPORT* = 10046;
		WSAEAFNOSUPPORT* = 10047;
		WSAEADDRINUSE* = 10048;
		WSAEADDRNOTAVAIL* = 10049;
		WSAENETDOWN* = 10050;
		WSAENETUNREACH* = 10051;
		WSAENETRESET* = 10052;
		WSAECONNABORTED* = 10053;
		WSAECONNRESET* = 10054;
		WSAENOBUFS* = 10055;
		WSAEISCONN* = 10056;
		WSAENOTCONN* = 10057;
		WSAESHUTDOWN* = 10058;
		WSAETOOMANYREFS* = 10059;
		WSAETIMEDOUT* = 10060;
		WSAECONNREFUSED* = 10061;
		WSAELOOP* = 10062;
		WSAENAMETOOLONG* = 10063;
		WSAEHOSTDOWN* = 10064;
		WSAEHOSTUNREACH* = 10065;
		WSAENOTEMPTY* = 10066;
		WSAEPROCLIM* = 10067;
		WSAEUSERS* = 10068;
		WSAEDQUOT* = 10069;
		WSAESTALE* = 10070;
		WSAEREMOTE* = 10071;
		WSASYSNOTREADY* = 10091;
		WSAVERNOTSUPPORTED* = 10092;
		WSANOTINITIALISED* = 10093;
		WSAEDISCON* = 10101;
		WSAHOST_NOT_FOUND* = 11001;
		HOST_NOT_FOUND* = 11001;
		WSATRY_AGAIN* = 11002;
		TRY_AGAIN* = 11002;
		WSANO_RECOVERY* = 11003;
		NO_RECOVERY* = 11003;
		WSANO_DATA* = 11004;
		NO_DATA* = 11004;
		WSANO_ADDRESS* = 11004;
		NO_ADDRESS* = 11004;
		WSA_IO_PENDING* = 10035;
		WSA_IO_INCOMPLETE* = 10035;
		WSA_INVALID_HANDLE* = 10038;
		WSA_INVALID_PARAMETER* = 10022;
		WSA_NOT_ENOUGH_MEMORY* = 10055;
		WSA_OPERATION_ABORTED* = 10004;
		WSA_MAXIMUM_WAIT_EVENTS* = 64;
		WSA_WAIT_FAILED* = -1;
		WSA_WAIT_EVENT_0* = 0;
		WSA_WAIT_TIMEOUT* = 258;
		WSA_INFINITE* = -1;
		CF_ACCEPT* = 0;
		CF_REJECT* = 1;
		CF_DEFER* = 2;
		SD_RECEIVE* = 0;
		SD_SEND* = 1;
		SD_BOTH* = 2;
		SG_UNCONSTRAINED_GROUP* = 1;
		SG_CONSTRAINED_GROUP* = 2;
		MAX_PROTOCOL_CHAIN* = 8;
		BASE_PROTOCOL* = 1;
		LAYERED_PROTOCOL* = 0;
		WSAPROTOCOL_LEN* = 255;
		XP1_CONNECTIONLESS* = {0};
		XP1_GUARANTEED_DELIVERY* = {1};
		XP1_GUARANTEED_ORDER* = {2};
		XP1_MESSAGE_ORIENTED* = {3};
		XP1_PSEUDO_STREAM* = {4};
		XP1_GRACEFUL_CLOSE* = {5};
		XP1_EXPEDITED_DATA* = {6};
		XP1_CONNECT_DATA* = {7};
		XP1_DISCONNECT_DATA* = {8};
		XP1_SUPPORT_BROADCAST* = {9};
		XP1_SUPPORT_MULTIPOINT* = {10};
		XP1_MULTIPOINT_CONTROL_PLANE* = {11};
		XP1_MULTIPOINT_DATA_PLANE* = {12};
		XP1_QOS_SUPPORTED* = {13};
		XP1_INTERRUPT* = {14};
		XP1_UNI_SEND* = {15};
		XP1_UNI_RECV* = {16};
		XP1_IFS_HANDLES* = {17};
		XP1_PARTIAL_MESSAGE* = {18};
		BIGENDIAN* = 0;
		LITTLEENDIAN* = 1;
		SECURITY_PROTOCOL_NONE* = 0;
		JL_SENDER_ONLY* = 1;
		JL_RECEIVER_ONLY* = 2;
		JL_BOTH* = 4;
		WSA_FLAG_OVERLAPPED* = {0};
		WSA_FLAG_MULTIPOINT_C_ROOT* = {1};
		WSA_FLAG_MULTIPOINT_C_LEAF* = {2};
		WSA_FLAG_MULTIPOINT_D_ROOT* = {3};
		WSA_FLAG_MULTIPOINT_D_LEAF* = {4};
		IOC_UNIX* = 0;
		IOC_WS2* = 134217728;
		IOC_PROTOCOL* = 268435456;
		IOC_VENDOR* = 402653184;
		SIO_ASSOCIATE_HANDLE* = -2013265919;
		SIO_ENABLE_CIRCULAR_QUEUEING* = 671088642;
		SIO_FIND_ROUTE* = 1207959555;
		SIO_FLUSH* = 671088644;
		SIO_GET_BROADCAST_ADDRESS* = 1207959557;
		SIO_GET_EXTENSION_FUNCTION_POINTER* = 1207959558;
		SIO_GET_QOS* = 1207959559;
		SIO_GET_GROUP_QOS* = 1207959560;
		SIO_MULTIPOINT_LOOPBACK* = -2013265911;
		SIO_MULTICAST_SCOPE* = -2013265910;
		SIO_SET_QOS* = -2013265909;
		SIO_SET_GROUP_QOS* = -2013265908;
		SIO_TRANSLATE_HANDLE* = -939524083;
		TH_NETDEV* = 1;
		TH_TAPI* = 2;
		SO_CONNDATA* = 28672;
		SO_CONNOPT* = 28673;
		SO_DISCDATA* = 28674;
		SO_DISCOPT* = 28675;
		SO_CONNDATALEN* = 28676;
		SO_CONNOPTLEN* = 28677;
		SO_DISCDATALEN* = 28678;
		SO_DISCOPTLEN* = 28679;
		SO_OPENTYPE* = 28680;
		SO_SYNCHRONOUS_ALERT* = 16;
		SO_SYNCHRONOUS_NONALERT* = 32;
		SO_MAXDG* = 28681;
		SO_MAXPATHDG* = 28682;
		SO_UPDATE_ACCEPT_CONTEXT* = 28683;
		SO_CONNECT_TIME* = 28684;
		TCP_BSDURGENT* = 28672;
		TF_DISCONNECT* = 1;
		TF_REUSE_SOCKET* = 2;

	CONST (* enumerations *)
		BestEffortService* = 0;
		PredictiveService* = 1;
		GuaranteedService* = 2;

	TYPE
		WCHAR = SHORTINT;
		NETRESOURCEA* = RECORD [1]
			dwScope*: INTEGER;
			dwType*: INTEGER;
			dwDisplayType*: INTEGER;
			dwUsage*: INTEGER;
			lpLocalName*: WinApi.PtrSTR;
			lpRemoteName*: WinApi.PtrSTR;
			lpComment*: WinApi.PtrSTR;
			lpProvider*: WinApi.PtrSTR;
		END;
		PtrNETRESOURCEA* = POINTER TO NETRESOURCEA;
		NETRESOURCEW* = RECORD [1]
			dwScope*: INTEGER;
			dwType*: INTEGER;
			dwDisplayType*: INTEGER;
			dwUsage*: INTEGER;
			lpLocalName*: WinApi.PtrWSTR;
			lpRemoteName*: WinApi.PtrWSTR;
			lpComment*: WinApi.PtrWSTR;
			lpProvider*: WinApi.PtrWSTR;
		END;
		PtrNETRESOURCEW* = POINTER TO NETRESOURCEW;
		NETRESOURCE* = NETRESOURCEA;
		PtrNETRESOURCE* = PtrNETRESOURCEA;
		CONNECTDLGSTRUCTA* = RECORD [1]
			cbStructure*: INTEGER;
			hwndOwner*: WinApi.HWND;
			lpConnRes*: PtrNETRESOURCEA;
			dwFlags*: SET;
			dwDevNum*: INTEGER;
		END;
		PtrCONNECTDLGSTRUCTA* = POINTER TO CONNECTDLGSTRUCTA;
		CONNECTDLGSTRUCTW* = RECORD [1]
			cbStructure*: INTEGER;
			hwndOwner*: WinApi.HWND;
			lpConnRes*: PtrNETRESOURCEW;
			dwFlags*: SET;
			dwDevNum*: INTEGER;
		END;
		PtrCONNECTDLGSTRUCTW* = POINTER TO CONNECTDLGSTRUCTW;
		CONNECTDLGSTRUCT* = CONNECTDLGSTRUCTA;
		PtrCONNECTDLGSTRUCT* = PtrCONNECTDLGSTRUCTA;
		DISCDLGSTRUCTA* = RECORD [1]
			cbStructure*: INTEGER;
			hwndOwner*: WinApi.HWND;
			lpLocalName*: WinApi.PtrSTR;
			lpRemoteName*: WinApi.PtrSTR;
			dwFlags*: SET;
		END;
		PtrDISCDLGSTRUCTA* = POINTER TO DISCDLGSTRUCTA;
		DISCDLGSTRUCTW* = RECORD [1]
			cbStructure*: INTEGER;
			hwndOwner*: WinApi.HWND;
			lpLocalName*: WinApi.PtrWSTR;
			lpRemoteName*: WinApi.PtrWSTR;
			dwFlags*: SET;
		END;
		PtrDISCDLGSTRUCTW* = POINTER TO DISCDLGSTRUCTW;
		DISCDLGSTRUCT* = DISCDLGSTRUCTA;
		PtrDISCDLGSTRUCT* = PtrDISCDLGSTRUCTA;
		UNIVERSAL_NAME_INFOA* = RECORD [1]
			lpUniversalName*: WinApi.PtrSTR;
		END;
		PtrUNIVERSAL_NAME_INFOA* = POINTER TO UNIVERSAL_NAME_INFOA;
		UNIVERSAL_NAME_INFOW* = RECORD [1]
			lpUniversalName*: WinApi.PtrWSTR;
		END;
		PtrUNIVERSAL_NAME_INFOW* = POINTER TO UNIVERSAL_NAME_INFOW;
		UNIVERSAL_NAME_INFO* = UNIVERSAL_NAME_INFOA;
		PtrUNIVERSAL_NAME_INFO* = PtrUNIVERSAL_NAME_INFOA;
		REMOTE_NAME_INFOA* = RECORD [1]
			lpUniversalName*: WinApi.PtrSTR;
			lpConnectionName*: WinApi.PtrSTR;
			lpRemainingPath*: WinApi.PtrSTR;
		END;
		PtrREMOTE_NAME_INFOA* = POINTER TO REMOTE_NAME_INFOA;
		REMOTE_NAME_INFOW* = RECORD [1]
			lpUniversalName*: WinApi.PtrWSTR;
			lpConnectionName*: WinApi.PtrWSTR;
			lpRemainingPath*: WinApi.PtrWSTR;
		END;
		PtrREMOTE_NAME_INFOW* = POINTER TO REMOTE_NAME_INFOW;
		REMOTE_NAME_INFO* = REMOTE_NAME_INFOA;
		PtrREMOTE_NAME_INFO* = PtrREMOTE_NAME_INFOA;
		NETINFOSTRUCT* = RECORD [1]
			cbStructure*: INTEGER;
			dwProviderVersion*: INTEGER;
			dwStatus*: SET;
			dwCharacteristics*: INTEGER;
			dwHandle*: INTEGER;
			wNetType*: SHORTINT;
			dwPrinters*: INTEGER;
			dwDrives*: INTEGER;
		END;
		PtrNETINFOSTRUCT* = POINTER TO NETINFOSTRUCT;
		FNGETPROFILEPATHA* = PROCEDURE [1] (pszUsername: WinApi.PtrSTR; pszBuffer: WinApi.PtrSTR; cbBuffer: INTEGER): INTEGER;
		FNGETPROFILEPATHW* = PROCEDURE [1] (pszUsername: WinApi.PtrWSTR; pszBuffer: WinApi.PtrWSTR; cbBuffer: INTEGER): INTEGER;
		FNRECONCILEPROFILEA* = PROCEDURE [1] (pszCentralFile: WinApi.PtrSTR; pszLocalFile: WinApi.PtrSTR; dwFlags: SET): INTEGER;
		FNRECONCILEPROFILEW* = PROCEDURE [1] (pszCentralFile: WinApi.PtrWSTR; pszLocalFile: WinApi.PtrWSTR; dwFlags: SET): INTEGER;
		FNPROCESSPOLICIESA* = PROCEDURE [1] (hwnd: WinApi.HWND; pszPath: WinApi.PtrSTR; pszUsername: WinApi.PtrSTR; pszComputerName: WinApi.PtrSTR; dwFlags: SET): WinApi.BOOL;
		FNPROCESSPOLICIESW* = PROCEDURE [1] (hwnd: WinApi.HWND; pszPath: WinApi.PtrWSTR; pszUsername: WinApi.PtrWSTR; pszComputerName: WinApi.PtrWSTR; dwFlags: SET): WinApi.BOOL;
		NETCONNECTINFOSTRUCT* = RECORD [1]
			cbStructure*: INTEGER;
			dwFlags*: SET;
			dwSpeed*: INTEGER;
			dwDelay*: INTEGER;
			dwOptDataSize*: INTEGER;
		END;
		PtrNETCONNECTINFOSTRUCT* = POINTER TO NETCONNECTINFOSTRUCT;
		PtrNCB* = POINTER TO NCB;
		NCB* = RECORD [1]
			ncb_command*: CHAR;
			ncb_retcode*: CHAR;
			ncb_lsn*: CHAR;
			ncb_num*: CHAR;
			ncb_buffer*: WinApi.PtrSTR;
			ncb_length*: SHORTINT;
			ncb_callname*: ARRAY [1] 16 OF CHAR;
			ncb_name*: ARRAY [1] 16 OF CHAR;
			ncb_rto*: CHAR;
			ncb_sto*: CHAR;
			ncb_post*: PROCEDURE [1] (p0: PtrNCB);
			ncb_lana_num*: CHAR;
			ncb_cmd_cplt*: CHAR;
			ncb_reserve*: ARRAY [1] 10 OF CHAR;
			ncb_event*: WinApi.HANDLE;
		END;
		ADAPTER_STATUS* = RECORD [1]
			adapter_address*: ARRAY [1] 6 OF CHAR;
			rev_major*: CHAR;
			reserved0*: CHAR;
			adapter_type*: CHAR;
			rev_minor*: CHAR;
			duration*: SHORTINT;
			frmr_recv*: SHORTINT;
			frmr_xmit*: SHORTINT;
			iframe_recv_err*: SHORTINT;
			xmit_aborts*: SHORTINT;
			xmit_success*: INTEGER;
			recv_success*: INTEGER;
			iframe_xmit_err*: SHORTINT;
			recv_buff_unavail*: SHORTINT;
			t1_timeouts*: SHORTINT;
			ti_timeouts*: SHORTINT;
			reserved1*: INTEGER;
			free_ncbs*: SHORTINT;
			max_cfg_ncbs*: SHORTINT;
			max_ncbs*: SHORTINT;
			xmit_buf_unavail*: SHORTINT;
			max_dgram_size*: SHORTINT;
			pending_sess*: SHORTINT;
			max_cfg_sess*: SHORTINT;
			max_sess*: SHORTINT;
			max_sess_pkt_size*: SHORTINT;
			name_count*: SHORTINT;
		END;
		PtrADAPTER_STATUS* = POINTER TO ADAPTER_STATUS;
		NAME_BUFFER* = RECORD [1]
			name*: ARRAY [1] 16 OF CHAR;
			name_num*: CHAR;
			name_flags*: CHAR;
		END;
		PtrNAME_BUFFER* = POINTER TO NAME_BUFFER;
		SESSION_HEADER* = RECORD [1]
			sess_name*: CHAR;
			num_sess*: CHAR;
			rcv_dg_outstanding*: CHAR;
			rcv_any_outstanding*: CHAR;
		END;
		PtrSESSION_HEADER* = POINTER TO SESSION_HEADER;
		SESSION_BUFFER* = RECORD [1]
			lsn*: CHAR;
			state*: CHAR;
			local_name*: ARRAY [1] 16 OF CHAR;
			remote_name*: ARRAY [1] 16 OF CHAR;
			rcvs_outstanding*: CHAR;
			sends_outstanding*: CHAR;
		END;
		PtrSESSION_BUFFER* = POINTER TO SESSION_BUFFER;
		LANA_ENUM* = RECORD [1]
			length*: CHAR;
			lana*: ARRAY [1] 255 OF CHAR;
		END;
		PtrLANA_ENUM* = POINTER TO LANA_ENUM;
		FIND_NAME_HEADER* = RECORD [1]
			node_count*: SHORTINT;
			reserved*: CHAR;
			unique_group*: CHAR;
		END;
		PtrFIND_NAME_HEADER* = POINTER TO FIND_NAME_HEADER;
		FIND_NAME_BUFFER* = RECORD [1]
			length*: CHAR;
			access_control*: CHAR;
			frame_control*: CHAR;
			destination_addr*: ARRAY [1] 6 OF CHAR;
			source_addr*: ARRAY [1] 6 OF CHAR;
			routing_info*: ARRAY [1] 18 OF CHAR;
		END;
		PtrFIND_NAME_BUFFER* = POINTER TO FIND_NAME_BUFFER;
		ACTION_HEADER* = RECORD [1]
			transport_id*: INTEGER;
			action_code*: SHORTINT;
			reserved*: SHORTINT;
		END;
		PtrACTION_HEADER* = POINTER TO ACTION_HEADER;
		u_char* = CHAR;
		u_short* = SHORTINT;
		u_int* = INTEGER;
		u_long* = INTEGER;
		SOCKET* = WinApi.PtrVoid;
		fd_set* = RECORD [1]
			fd_count*: u_int;
			fd_array*: ARRAY [1] 64 OF SOCKET;
		END;
		Ptrfd_set* = POINTER TO fd_set;
		timeval* = RECORD [1]
			tv_sec*: INTEGER;
			tv_usec*: INTEGER;
		END;
		Ptrtimeval* = POINTER TO timeval;
		in_addr* = RECORD [1]
			S_un*: RECORD [1] (* [union] *)
				(*S_un_b*: RECORD [1]
					s_b1*: u_char;
					s_b2*: u_char;
					s_b3*: u_char;
					s_b4*: u_char;
				END;
				S_un_w*: RECORD [1]
					s_w1*: u_short;
					s_w2*: u_short;
				END;*)
				S_addr*: u_long;
			END;
		END;
		Ptrin_addr* = POINTER TO in_addr;
		hostent* = RECORD [1]
			h_name*: WinApi.PtrSTR;
			h_aliases*: WinApi.PtrVoid(*POINTER TO (*?*) ARRAY [1] OF WinApi.PtrSTR*);
			h_addrtype*: SHORTINT;
			h_length*: SHORTINT;
			h_addr_list*: WinApi.PtrVoid(*POINTER TO (*?*) ARRAY [1] OF POINTER TO ARRAY [1] OF in_addr*);
		END;
		Ptrhostent* = POINTER TO hostent;
		netent* = RECORD [1]
			n_name*: WinApi.PtrSTR;
			n_aliases*: WinApi.PtrVoid(*POINTER TO (*?*) ARRAY [1] OF WinApi.PtrSTR*);
			n_addrtype*: SHORTINT;
			n_net*: u_long;
		END;
		servent* = RECORD [1]
			s_name*: WinApi.PtrSTR;
			s_aliases*: WinApi.PtrVoid(*POINTER TO (*?*) ARRAY [1] OF WinApi.PtrSTR*);
			s_port*: SHORTINT;
			s_proto*: WinApi.PtrSTR;
		END;
		Ptrservent* = POINTER TO servent;
		protoent* = RECORD [1]
			p_name*: WinApi.PtrSTR;
			p_aliases*: WinApi.PtrVoid(*POINTER TO (*?*) ARRAY [1] OF WinApi.PtrSTR*);
			p_proto*: SHORTINT;
		END;
		Ptrprotoent* = POINTER TO protoent;
		sockaddr_in* = RECORD [1]
			sin_family*: SHORTINT;
			sin_port*: u_short;
			sin_addr*: in_addr;
			sin_zero*: ARRAY [1] 8 OF CHAR;
		END;
		Ptrsockaddr_in* = POINTER TO sockaddr_in;
		WSADATA* = RECORD [1]
			wVersion*: SHORTINT;
			wHighVersion*: SHORTINT;
			szDescription*: ARRAY [1] 257 OF CHAR;
			szSystemStatus*: ARRAY [1] 129 OF CHAR;
			iMaxSockets*: SHORTINT;
			iMaxUdpDg*: SHORTINT;
			lpVendorInfo*: WinApi.PtrSTR;
		END;
		PtrWSADATA* = POINTER TO WSADATA;
		sockaddr* = RECORD [1]
			sa_family*: u_short;
			sa_data*: ARRAY [1] 14 OF CHAR;
		END;
		Ptrsockaddr* = POINTER TO sockaddr;
		sockproto* = RECORD [1]
			sp_family*: u_short;
			sp_protocol*: u_short;
		END;
		linger* = RECORD [1]
			l_onoff*: u_short;
			l_linger*: u_short;
		END;
		Ptrlinger* = POINTER TO linger;
		WSAEVENT* = INTEGER;
		WSAOVERLAPPED* = RECORD [1]
			Internal*: INTEGER;
			InternalHigh*: INTEGER;
			Offset*: INTEGER;
			OffsetHigh*: INTEGER;
			hEvent*: WSAEVENT;
		END;
		PtrWSAOVERLAPPED* = POINTER TO WSAOVERLAPPED;
		WSABUF* = RECORD [1]
			len*: u_long;
			buf*: WinApi.PtrSTR;
		END;
		PtrWSABUF* = POINTER TO WSABUF;
		GUARANTEE* = INTEGER;
		int32* = INTEGER;
		FLOWSPEC* = RECORD [1]
			TokenRate*: int32;
			TokenBucketSize*: int32;
			PeakBandwidth*: int32;
			Latency*: int32;
			DelayVariation*: int32;
			LevelOfGuarantee*: GUARANTEE;
			CostOfCall*: int32;
			NetworkAvailability*: int32;
		END;
		PtrFLOWSPEC* = POINTER TO FLOWSPEC;
		QOS* = RECORD [1]
			SendingFlowspec*: WSABUF;
			ReceivingFlowspec*: WSABUF;
		END;
		PtrQOS* = POINTER TO QOS;
		GROUP* = INTEGER;
		WSANETWORKEVENTS* = RECORD [1]
			lNetworkEvents*: INTEGER;
			iErrorCode*: ARRAY [1] 8 OF INTEGER;
		END;
		PtrWSANETWORKEVENTS* = POINTER TO WSANETWORKEVENTS;
		WSAPROTOCOLCHAIN* = RECORD [1]
			ChainLen*: INTEGER;
			ChainEntries*: ARRAY [1] 8 OF INTEGER;
		END;
		PtrWSAPROTOCOLCHAIN* = POINTER TO WSAPROTOCOLCHAIN;
		WSAPROTOCOL_INFOA* = RECORD [1]
			dwServiceFlags1*: INTEGER;
			dwServiceFlags2*: INTEGER;
			dwServiceFlags3*: INTEGER;
			dwServiceFlags4*: INTEGER;
			dwProviderId*: INTEGER;
			dwCatalogEntryId*: INTEGER;
			ProtocolChain*: WSAPROTOCOLCHAIN;
			iVersion*: INTEGER;
			iAddressFamily*: INTEGER;
			iMaxSockAddr*: INTEGER;
			iMinSockAddr*: INTEGER;
			iSocketType*: INTEGER;
			iProtocol*: INTEGER;
			iNetworkByteOrder*: INTEGER;
			iSecurityScheme*: INTEGER;
			bMultiple*: WinApi.BOOL;
			bFirst*: WinApi.BOOL;
			dwMessageSize*: INTEGER;
			dwProviderReserved*: INTEGER;
			szProtocol*: ARRAY [1] 256 OF CHAR;
		END;
		PtrWSAPROTOCOL_INFOA* = POINTER TO WSAPROTOCOL_INFOA;
		WSAPROTOCOL_INFOW* = RECORD [1]
			dwServiceFlags1*: INTEGER;
			dwServiceFlags2*: INTEGER;
			dwServiceFlags3*: INTEGER;
			dwServiceFlags4*: INTEGER;
			dwProviderId*: INTEGER;
			dwCatalogEntryId*: INTEGER;
			ProtocolChain*: WSAPROTOCOLCHAIN;
			iVersion*: INTEGER;
			iAddressFamily*: INTEGER;
			iMaxSockAddr*: INTEGER;
			iMinSockAddr*: INTEGER;
			iSocketType*: INTEGER;
			iProtocol*: INTEGER;
			iNetworkByteOrder*: INTEGER;
			iSecurityScheme*: INTEGER;
			bMultiple*: WinApi.BOOL;
			bFirst*: WinApi.BOOL;
			dwMessageSize*: INTEGER;
			dwProviderReserved*: INTEGER;
			szProtocol*: ARRAY [1] 256 OF WCHAR;
		END;
		PtrWSAPROTOCOL_INFOW* = POINTER TO WSAPROTOCOL_INFOW;
		WSAPROTOCOL_INFO* = WSAPROTOCOL_INFOA;
		PtrWSAPROTOCOL_INFO* = PtrWSAPROTOCOL_INFOA;
		CONDITIONPROC* = PROCEDURE [1] (VAR [nil] lpCallerId: WSABUF; VAR [nil] lpCallerData: WSABUF; VAR [nil] lpSQOS: QOS; VAR [nil] lpGQOS: QOS; VAR [nil] lpCalleeId: WSABUF; VAR [nil] lpCalleeData: WSABUF; VAR [nil] g: GROUP; dwCallbackData: INTEGER): INTEGER;
		WSAOVERLAPPED_COMPLETION_ROUTINE* = PROCEDURE [1] (dwError: INTEGER; cbTransferred: INTEGER; VAR [nil] lpOverlapped: WSAOVERLAPPED; dwFlags: SET);
		SOCKADDR* = sockaddr;
		PtrSOCKADDR* = Ptrsockaddr;
		SOCKADDR_IN* = sockaddr_in;
		PtrSOCKADDR_IN* = Ptrsockaddr_in;
		LINGER* = linger;
		PtrLINGER* = Ptrlinger;
		IN_ADDR* = in_addr;
		PtrIN_ADDR* = Ptrin_addr;
		FD_SET* = fd_set;
		PtrFD_SET* = Ptrfd_set;
		HOSTENT* = hostent;
		PtrHOSTENT* = Ptrhostent;
		SERVENT* = servent;
		PtrSERVENT* = Ptrservent;
		PROTOENT* = protoent;
		PtrPROTOENT* = Ptrprotoent;
		TIMEVAL* = timeval;
		PtrTIMEVAL* = Ptrtimeval;
		TRANSMIT_FILE_BUFFERS* = RECORD [1]
			Head*: WinApi.PtrVoid;
			HeadLength*: INTEGER;
			Tail*: WinApi.PtrVoid;
			TailLength*: INTEGER;
		END;
		PtrTRANSMIT_FILE_BUFFERS* = POINTER TO TRANSMIT_FILE_BUFFERS;

	PROCEDURE [1] -WNetAddConnectionA* (lpRemoteName: WinApi.PtrSTR; lpPassword: WinApi.PtrSTR; lpLocalName: WinApi.PtrSTR): INTEGER;
	(*END WNetAddConnectionA;*)

	PROCEDURE [1] -WNetAddConnectionW* (lpRemoteName: WinApi.PtrWSTR; lpPassword: WinApi.PtrWSTR; lpLocalName: WinApi.PtrWSTR): INTEGER;
	(*END WNetAddConnectionW;*)

	PROCEDURE [1] -WNetAddConnection* (lpRemoteName: WinApi.PtrSTR; lpPassword: WinApi.PtrSTR; lpLocalName: WinApi.PtrSTR): INTEGER "WNetAddConnectionA(lpRemoteName, lpPassword, lpLocalName)";
	(*END WNetAddConnection;*)

	PROCEDURE [1] -WNetAddConnection2A* (VAR [nil] lpNetResource: NETRESOURCEA; lpPassword: WinApi.PtrSTR; lpUserName: WinApi.PtrSTR; dwFlags: SET): INTEGER;
	(*END WNetAddConnection2A;*)

	PROCEDURE [1] -WNetAddConnection2W* (VAR [nil] lpNetResource: NETRESOURCEW; lpPassword: WinApi.PtrWSTR; lpUserName: WinApi.PtrWSTR; dwFlags: SET): INTEGER;
	(*END WNetAddConnection2W;*)

	PROCEDURE [1] -WNetAddConnection2* (VAR [nil] lpNetResource: NETRESOURCEA; lpPassword: WinApi.PtrSTR; lpUserName: WinApi.PtrSTR; dwFlags: SET): INTEGER "WNetAddConnection2A(lpNetResource, lpPassword, lpUserName, dwFlags)";
	(*END WNetAddConnection2;*)

	PROCEDURE [1] -WNetAddConnection3A* (hwndOwner: WinApi.HWND; VAR [nil] lpNetResource: NETRESOURCEA; lpPassword: WinApi.PtrSTR; lpUserName: WinApi.PtrSTR; dwFlags: SET): INTEGER;
	(*END WNetAddConnection3A;*)

	PROCEDURE [1] -WNetAddConnection3W* (hwndOwner: WinApi.HWND; VAR [nil] lpNetResource: NETRESOURCEW; lpPassword: WinApi.PtrWSTR; lpUserName: WinApi.PtrWSTR; dwFlags: SET): INTEGER;
	(*END WNetAddConnection3W;*)

	PROCEDURE [1] -WNetAddConnection3* (hwndOwner: WinApi.HWND; VAR [nil] lpNetResource: NETRESOURCEA; lpPassword: WinApi.PtrSTR; lpUserName: WinApi.PtrSTR; dwFlags: SET): INTEGER "WNetAddConnection3A(hwndOwner, lpNetResource, lpPassword, lpUserName, dwFlags)";
	(*END WNetAddConnection3;*)

	PROCEDURE [1] -WNetCancelConnectionA* (lpName: WinApi.PtrSTR; fForce: WinApi.BOOL): INTEGER;
	(*END WNetCancelConnectionA;*)

	PROCEDURE [1] -WNetCancelConnectionW* (lpName: WinApi.PtrWSTR; fForce: WinApi.BOOL): INTEGER;
	(*END WNetCancelConnectionW;*)

	PROCEDURE [1] -WNetCancelConnection* (lpName: WinApi.PtrSTR; fForce: WinApi.BOOL): INTEGER "WNetCancelConnectionA(lpName, fForce)";
	(*END WNetCancelConnection;*)

	PROCEDURE [1] -WNetCancelConnection2A* (lpName: WinApi.PtrSTR; dwFlags: SET; fForce: WinApi.BOOL): INTEGER;
	(*END WNetCancelConnection2A;*)

	PROCEDURE [1] -WNetCancelConnection2W* (lpName: WinApi.PtrWSTR; dwFlags: SET; fForce: WinApi.BOOL): INTEGER;
	(*END WNetCancelConnection2W;*)

	PROCEDURE [1] -WNetCancelConnection2* (lpName: WinApi.PtrSTR; dwFlags: SET; fForce: WinApi.BOOL): INTEGER "WNetCancelConnection2A(lpName, dwFlags, fForce)";
	(*END WNetCancelConnection2;*)

	PROCEDURE [1] -WNetGetConnectionA* (lpLocalName: WinApi.PtrSTR; lpRemoteName: WinApi.PtrSTR; VAR [nil] lpnLength: INTEGER): INTEGER;
	(*END WNetGetConnectionA;*)

	PROCEDURE [1] -WNetGetConnectionW* (lpLocalName: WinApi.PtrWSTR; lpRemoteName: WinApi.PtrWSTR; VAR [nil] lpnLength: INTEGER): INTEGER;
	(*END WNetGetConnectionW;*)

	PROCEDURE [1] -WNetGetConnection* (lpLocalName: WinApi.PtrSTR; lpRemoteName: WinApi.PtrSTR; VAR [nil] lpnLength: INTEGER): INTEGER "WNetGetConnectionA(lpLocalName, lpRemoteName, lpnLength)";
	(*END WNetGetConnection;*)

	PROCEDURE [1] -WNetUseConnectionA* (hwndOwner: WinApi.HWND; VAR [nil] lpNetResource: NETRESOURCEA; lpUserID: WinApi.PtrSTR; lpPassword: WinApi.PtrSTR; dwFlags: SET; lpAccessName: WinApi.PtrSTR; VAR [nil] lpBufferSize: INTEGER; VAR [nil] lpResult: INTEGER): INTEGER;
	(*END WNetUseConnectionA;*)

	PROCEDURE [1] -WNetUseConnectionW* (hwndOwner: WinApi.HWND; VAR [nil] lpNetResource: NETRESOURCEW; lpUserID: WinApi.PtrWSTR; lpPassword: WinApi.PtrWSTR; dwFlags: SET; lpAccessName: WinApi.PtrWSTR; VAR [nil] lpBufferSize: INTEGER; VAR [nil] lpResult: INTEGER): INTEGER;
	(*END WNetUseConnectionW;*)

	PROCEDURE [1] -WNetUseConnection* (hwndOwner: WinApi.HWND; VAR [nil] lpNetResource: NETRESOURCEA; lpUserID: WinApi.PtrSTR; lpPassword: WinApi.PtrSTR; dwFlags: SET; lpAccessName: WinApi.PtrSTR; VAR [nil] lpBufferSize: INTEGER; VAR [nil] lpResult: INTEGER): INTEGER "WNetUseConnectionA(hwndOwner, lpNetResource, lpUserID, lpPassword, dwFlags, lpAccessName, lpBufferSize, lpResult)";
	(*END WNetUseConnection;*)

	PROCEDURE [1] -WNetSetConnectionA* (lpName: WinApi.PtrSTR; dwProperties: INTEGER; pvValues: WinApi.PtrVoid): INTEGER;
	(*END WNetSetConnectionA;*)

	PROCEDURE [1] -WNetSetConnectionW* (lpName: WinApi.PtrWSTR; dwProperties: INTEGER; pvValues: WinApi.PtrVoid): INTEGER;
	(*END WNetSetConnectionW;*)

	PROCEDURE [1] -WNetSetConnection* (lpName: WinApi.PtrSTR; dwProperties: INTEGER; pvValues: WinApi.PtrVoid): INTEGER "WNetSetConnectionA(lpName, dwProperties, pvValues)";
	(*END WNetSetConnection;*)

	PROCEDURE [1] -WNetConnectionDialog* (hwnd: WinApi.HWND; dwType: INTEGER): INTEGER;
	(*END WNetConnectionDialog;*)

	PROCEDURE [1] -WNetDisconnectDialog* (hwnd: WinApi.HWND; dwType: INTEGER): INTEGER;
	(*END WNetDisconnectDialog;*)

	PROCEDURE [1] -WNetConnectionDialog1A* (VAR [nil] lpConnDlgStruct: CONNECTDLGSTRUCTA): INTEGER;
	(*END WNetConnectionDialog1A;*)

	PROCEDURE [1] -WNetConnectionDialog1W* (VAR [nil] lpConnDlgStruct: CONNECTDLGSTRUCTW): INTEGER;
	(*END WNetConnectionDialog1W;*)

	PROCEDURE [1] -WNetConnectionDialog1* (VAR [nil] lpConnDlgStruct: CONNECTDLGSTRUCTA): INTEGER "WNetConnectionDialog1A(lpConnDlgStruct)";
	(*END WNetConnectionDialog1;*)

	PROCEDURE [1] -WNetDisconnectDialog1A* (VAR [nil] lpConnDlgStruct: DISCDLGSTRUCTA): INTEGER;
	(*END WNetDisconnectDialog1A;*)

	PROCEDURE [1] -WNetDisconnectDialog1W* (VAR [nil] lpConnDlgStruct: DISCDLGSTRUCTW): INTEGER;
	(*END WNetDisconnectDialog1W;*)

	PROCEDURE [1] -WNetDisconnectDialog1* (VAR [nil] lpConnDlgStruct: DISCDLGSTRUCTA): INTEGER "WNetDisconnectDialog1A(lpConnDlgStruct)";
	(*END WNetDisconnectDialog1;*)

	PROCEDURE [1] -WNetOpenEnumA* (dwScope: INTEGER; dwType: INTEGER; dwUsage: INTEGER; VAR [nil] lpNetResource: NETRESOURCEA; VAR [nil] lphEnum: WinApi.HANDLE): INTEGER;
	(*END WNetOpenEnumA;*)

	PROCEDURE [1] -WNetOpenEnumW* (dwScope: INTEGER; dwType: INTEGER; dwUsage: INTEGER; VAR [nil] lpNetResource: NETRESOURCEW; VAR [nil] lphEnum: WinApi.HANDLE): INTEGER;
	(*END WNetOpenEnumW;*)

	PROCEDURE [1] -WNetOpenEnum* (dwScope: INTEGER; dwType: INTEGER; dwUsage: INTEGER; VAR [nil] lpNetResource: NETRESOURCEA; VAR [nil] lphEnum: WinApi.HANDLE): INTEGER "WNetOpenEnumA(dwScope, dwType, dwUsage, lpNetResource, lphEnum)";
	(*END WNetOpenEnum;*)

	PROCEDURE [1] -WNetEnumResourceA* (hEnum: WinApi.HANDLE; VAR [nil] lpcCount: INTEGER; lpBuffer: WinApi.PtrVoid; VAR [nil] lpBufferSize: INTEGER): INTEGER;
	(*END WNetEnumResourceA;*)

	PROCEDURE [1] -WNetEnumResourceW* (hEnum: WinApi.HANDLE; VAR [nil] lpcCount: INTEGER; lpBuffer: WinApi.PtrVoid; VAR [nil] lpBufferSize: INTEGER): INTEGER;
	(*END WNetEnumResourceW;*)

	PROCEDURE [1] -WNetEnumResource* (hEnum: WinApi.HANDLE; VAR [nil] lpcCount: INTEGER; lpBuffer: WinApi.PtrVoid; VAR [nil] lpBufferSize: INTEGER): INTEGER "WNetEnumResourceA(hEnum, lpcCount, lpBuffer, lpBufferSize)";
	(*END WNetEnumResource;*)

	PROCEDURE [1] -WNetCloseEnum* (hEnum: WinApi.HANDLE): INTEGER;
	(*END WNetCloseEnum;*)

	PROCEDURE [1] -WNetGetResourceParentA* (VAR [nil] lpNetResource: NETRESOURCEA; lpBuffer: WinApi.PtrVoid; VAR [nil] cbBuffer: INTEGER): INTEGER;
	(*END WNetGetResourceParentA;*)

	PROCEDURE [1] -WNetGetResourceParentW* (VAR [nil] lpNetResource: NETRESOURCEW; lpBuffer: WinApi.PtrVoid; VAR [nil] cbBuffer: INTEGER): INTEGER;
	(*END WNetGetResourceParentW;*)

	PROCEDURE [1] -WNetGetResourceParent* (VAR [nil] lpNetResource: NETRESOURCEA; lpBuffer: WinApi.PtrVoid; VAR [nil] cbBuffer: INTEGER): INTEGER "WNetGetResourceParentA(lpNetResource, lpBuffer, cbBuffer)";
	(*END WNetGetResourceParent;*)

	PROCEDURE [1] -WNetGetResourceInformationA* (VAR [nil] lpNetResource: NETRESOURCEA; lpBuffer: WinApi.PtrVoid; VAR [nil] cbBuffer: INTEGER; VAR [nil] lplpSystem: WinApi.PtrSTR): INTEGER;
	(*END WNetGetResourceInformationA;*)

	PROCEDURE [1] -WNetGetResourceInformationW* (VAR [nil] lpNetResource: NETRESOURCEW; lpBuffer: WinApi.PtrVoid; VAR [nil] cbBuffer: INTEGER; VAR [nil] lplpSystem: WinApi.PtrWSTR): INTEGER;
	(*END WNetGetResourceInformationW;*)

	PROCEDURE [1] -WNetGetResourceInformation* (VAR [nil] lpNetResource: NETRESOURCEA; lpBuffer: WinApi.PtrVoid; VAR [nil] cbBuffer: INTEGER; VAR [nil] lplpSystem: WinApi.PtrSTR): INTEGER "WNetGetResourceInformationA(lpNetResource, lpBuffer, cbBuffer, lplpSystem)";
	(*END WNetGetResourceInformation;*)

	PROCEDURE [1] -WNetGetUniversalNameA* (lpLocalPath: WinApi.PtrSTR; dwInfoLevel: INTEGER; lpBuffer: WinApi.PtrVoid; VAR [nil] lpBufferSize: INTEGER): INTEGER;
	(*END WNetGetUniversalNameA;*)

	PROCEDURE [1] -WNetGetUniversalNameW* (lpLocalPath: WinApi.PtrWSTR; dwInfoLevel: INTEGER; lpBuffer: WinApi.PtrVoid; VAR [nil] lpBufferSize: INTEGER): INTEGER;
	(*END WNetGetUniversalNameW;*)

	PROCEDURE [1] -WNetGetUniversalName* (lpLocalPath: WinApi.PtrSTR; dwInfoLevel: INTEGER; lpBuffer: WinApi.PtrVoid; VAR [nil] lpBufferSize: INTEGER): INTEGER "WNetGetUniversalNameA(lpLocalPath, dwInfoLevel, lpBuffer, lpBufferSize)";
	(*END WNetGetUniversalName;*)

	PROCEDURE [1] -WNetGetUserA* (lpName: WinApi.PtrSTR; lpUserName: WinApi.PtrSTR; VAR [nil] lpnLength: INTEGER): INTEGER;
	(*END WNetGetUserA;*)

	PROCEDURE [1] -WNetGetUserW* (lpName: WinApi.PtrWSTR; lpUserName: WinApi.PtrWSTR; VAR [nil] lpnLength: INTEGER): INTEGER;
	(*END WNetGetUserW;*)

	PROCEDURE [1] -WNetGetUser* (lpName: WinApi.PtrSTR; lpUserName: WinApi.PtrSTR; VAR [nil] lpnLength: INTEGER): INTEGER "WNetGetUserA(lpName, lpUserName, lpnLength)";
	(*END WNetGetUser;*)

	PROCEDURE [1] -WNetGetProviderNameA* (dwNetType: INTEGER; lpProviderName: WinApi.PtrSTR; VAR [nil] lpBufferSize: INTEGER): INTEGER;
	(*END WNetGetProviderNameA;*)

	PROCEDURE [1] -WNetGetProviderNameW* (dwNetType: INTEGER; lpProviderName: WinApi.PtrWSTR; VAR [nil] lpBufferSize: INTEGER): INTEGER;
	(*END WNetGetProviderNameW;*)

	PROCEDURE [1] -WNetGetProviderName* (dwNetType: INTEGER; lpProviderName: WinApi.PtrSTR; VAR [nil] lpBufferSize: INTEGER): INTEGER "WNetGetProviderNameA(dwNetType, lpProviderName, lpBufferSize)";
	(*END WNetGetProviderName;*)

	PROCEDURE [1] -WNetGetNetworkInformationA* (lpProvider: WinApi.PtrSTR; VAR [nil] lpNetInfoStruct: NETINFOSTRUCT): INTEGER;
	(*END WNetGetNetworkInformationA;*)

	PROCEDURE [1] -WNetGetNetworkInformationW* (lpProvider: WinApi.PtrWSTR; VAR [nil] lpNetInfoStruct: NETINFOSTRUCT): INTEGER;
	(*END WNetGetNetworkInformationW;*)

	PROCEDURE [1] -WNetGetNetworkInformation* (lpProvider: WinApi.PtrSTR; VAR [nil] lpNetInfoStruct: NETINFOSTRUCT): INTEGER "WNetGetNetworkInformationA(lpProvider, lpNetInfoStruct)";
	(*END WNetGetNetworkInformation;*)

	PROCEDURE [1] -WNetGetLastErrorA* (VAR [nil] lpError: INTEGER; lpErrorBuf: WinApi.PtrSTR; nErrorBufSize: INTEGER; lpNameBuf: WinApi.PtrSTR; nNameBufSize: INTEGER): INTEGER;
	(*END WNetGetLastErrorA;*)

	PROCEDURE [1] -WNetGetLastErrorW* (VAR [nil] lpError: INTEGER; lpErrorBuf: WinApi.PtrWSTR; nErrorBufSize: INTEGER; lpNameBuf: WinApi.PtrWSTR; nNameBufSize: INTEGER): INTEGER;
	(*END WNetGetLastErrorW;*)

	PROCEDURE [1] -WNetGetLastError* (VAR [nil] lpError: INTEGER; lpErrorBuf: WinApi.PtrSTR; nErrorBufSize: INTEGER; lpNameBuf: WinApi.PtrSTR; nNameBufSize: INTEGER): INTEGER "WNetGetLastErrorA(lpError, lpErrorBuf, nErrorBufSize, lpNameBuf, nNameBufSize)";
	(*END WNetGetLastError;*)

	PROCEDURE [1] -MultinetGetConnectionPerformanceA* (VAR [nil] lpNetResource: NETRESOURCEA; VAR [nil] lpNetConnectInfoStruct: NETCONNECTINFOSTRUCT): INTEGER;
	(*END MultinetGetConnectionPerformanceA;*)

	PROCEDURE [1] -MultinetGetConnectionPerformanceW* (VAR [nil] lpNetResource: NETRESOURCEW; VAR [nil] lpNetConnectInfoStruct: NETCONNECTINFOSTRUCT): INTEGER;
	(*END MultinetGetConnectionPerformanceW;*)

	PROCEDURE [1] -MultinetGetConnectionPerformance* (VAR [nil] lpNetResource: NETRESOURCEA; VAR [nil] lpNetConnectInfoStruct: NETCONNECTINFOSTRUCT): INTEGER "MultinetGetConnectionPerformanceA(lpNetResource, lpNetConnectInfoStruct)";
	(*END MultinetGetConnectionPerformance;*)

	PROCEDURE [1] -Netbios* (VAR [nil] pncb: NCB): CHAR;
	(*END Netbios;*)

	PROCEDURE [1] -__WSAFDIsSet* (p0: SOCKET; VAR [nil] p1: fd_set): INTEGER;
	(*END __WSAFDIsSet;*)

	PROCEDURE [1] -accept* (s: SOCKET; VAR [nil] addr: sockaddr; VAR [nil] addrlen: INTEGER): SOCKET;
	(*END accept;*)

	PROCEDURE [1] -bind* (s: SOCKET; VAR [nil] name: sockaddr; namelen: INTEGER): INTEGER;
	(*END bind;*)

	PROCEDURE [1] -closesocket* (s: SOCKET): INTEGER;
	(*END closesocket;*)

	PROCEDURE [1] -connect* (s: SOCKET; VAR [nil] name: sockaddr; namelen: INTEGER): INTEGER;
	(*END connect;*)

	PROCEDURE [1] -ioctlsocket* (s: SOCKET; cmd: INTEGER; VAR [nil] argp: u_long): INTEGER;
	(*END ioctlsocket;*)

	PROCEDURE [1] -getpeername* (s: SOCKET; VAR [nil] name: sockaddr; VAR [nil] namelen: INTEGER): INTEGER;
	(*END getpeername;*)

	PROCEDURE [1] -getsockname* (s: SOCKET; VAR [nil] name: sockaddr; VAR [nil] namelen: INTEGER): INTEGER;
	(*END getsockname;*)

	PROCEDURE [1] -getsockopt* (s: SOCKET; level: INTEGER; optname: INTEGER; optval: WinApi.PtrSTR; VAR [nil] optlen: INTEGER): INTEGER;
	(*END getsockopt;*)

	PROCEDURE [1] -htonl* (hostlong: u_long): u_long;
	(*END htonl;*)

	PROCEDURE [1] -htons* (hostshort: u_short): u_short;
	(*END htons;*)

	PROCEDURE [1] -inet_addr* (cp: WinApi.PtrSTR): INTEGER;
	(*END inet_addr;*)

	PROCEDURE [1] -inet_ntoa* (in: in_addr): WinApi.PtrSTR;
	(*END inet_ntoa;*)

	PROCEDURE [1] -listen* (s: SOCKET; backlog: INTEGER): INTEGER;
	(*END listen;*)

	PROCEDURE [1] -ntohl* (netlong: u_long): u_long;
	(*END ntohl;*)

	PROCEDURE [1] -ntohs* (netshort: u_short): u_short;
	(*END ntohs;*)

	PROCEDURE [1] -recv* (s: SOCKET; buf: WinApi.PtrSTR; len: INTEGER; flags: SET): INTEGER;
	(*END recv;*)

	PROCEDURE [1] -recvfrom* (s: SOCKET; buf: WinApi.PtrSTR; len: INTEGER; flags: SET; VAR [nil] from: sockaddr; VAR [nil] fromlen: INTEGER): INTEGER;
	(*END recvfrom;*)

	PROCEDURE [1] -select* (nfds: INTEGER; VAR [nil] readfds: fd_set; VAR [nil] writefds: fd_set; VAR [nil] exceptfds: fd_set; VAR [nil] timeout: timeval): INTEGER;
	(*END select;*)

	PROCEDURE [1] -send* (s: SOCKET; buf: WinApi.PtrSTR; len: INTEGER; flags: SET): INTEGER;
	(*END send;*)

	PROCEDURE [1] -sendto* (s: SOCKET; buf: WinApi.PtrSTR; len: INTEGER; flags: SET; VAR [nil] to: sockaddr; tolen: INTEGER): INTEGER;
	(*END sendto;*)

	PROCEDURE [1] -setsockopt* (s: SOCKET; level: INTEGER; optname: INTEGER; optval: WinApi.PtrSTR; optlen: INTEGER): INTEGER;
	(*END setsockopt;*)

	PROCEDURE [1] -shutdown* (s: SOCKET; how: INTEGER): INTEGER;
	(*END shutdown;*)

	PROCEDURE [1] -socket* (af: INTEGER; type: INTEGER; protocol: INTEGER): SOCKET;
	(*END socket;*)

	PROCEDURE [1] -gethostbyaddr* (addr: WinApi.PtrSTR; len: INTEGER; type: INTEGER): Ptrhostent;
	(*END gethostbyaddr;*)

	PROCEDURE [1] -gethostbyname* (name: WinApi.PtrSTR): Ptrhostent;
	(*END gethostbyname;*)

	PROCEDURE [1] -gethostname* (name: WinApi.PtrSTR; namelen: INTEGER): INTEGER;
	(*END gethostname;*)

	PROCEDURE [1] -getservbyport* (port: INTEGER; proto: WinApi.PtrSTR): Ptrservent;
	(*END getservbyport;*)

	PROCEDURE [1] -getservbyname* (name: WinApi.PtrSTR; proto: WinApi.PtrSTR): Ptrservent;
	(*END getservbyname;*)

	PROCEDURE [1] -getprotobynumber* (number: INTEGER): Ptrprotoent;
	(*END getprotobynumber;*)

	PROCEDURE [1] -getprotobyname* (name: WinApi.PtrSTR): Ptrprotoent;
	(*END getprotobyname;*)

	PROCEDURE [1] -WSAStartup* (wVersionRequested: SHORTINT; VAR [nil] lpWSAData: WSADATA): INTEGER;
	(*END WSAStartup;*)

	PROCEDURE [1] -WSACleanup* (): INTEGER;
	(*END WSACleanup;*)

	PROCEDURE [1] -WSASetLastError* (iError: INTEGER);
	(*END WSASetLastError;*)

	PROCEDURE [1] -WSAGetLastError* (): INTEGER;
	(*END WSAGetLastError;*)

	PROCEDURE [1] -WSAIsBlocking* (): WinApi.BOOL;
	(*END WSAIsBlocking;*)

	PROCEDURE [1] -WSAUnhookBlockingHook* (): INTEGER;
	(*END WSAUnhookBlockingHook;*)

	PROCEDURE [1] -WSASetBlockingHook* (lpBlockFunc: WinApi.FARPROC): WinApi.FARPROC;
	(*END WSASetBlockingHook;*)

	PROCEDURE [1] -WSACancelBlockingCall* (): INTEGER;
	(*END WSACancelBlockingCall;*)

	PROCEDURE [1] -WSAAsyncGetServByName* (hWnd: WinApi.HWND; wMsg: u_int; name: WinApi.PtrSTR; proto: WinApi.PtrSTR; buf: WinApi.PtrSTR; buflen: INTEGER): WinApi.HANDLE;
	(*END WSAAsyncGetServByName;*)

	PROCEDURE [1] -WSAAsyncGetServByPort* (hWnd: WinApi.HWND; wMsg: u_int; port: INTEGER; proto: WinApi.PtrSTR; buf: WinApi.PtrSTR; buflen: INTEGER): WinApi.HANDLE;
	(*END WSAAsyncGetServByPort;*)

	PROCEDURE [1] -WSAAsyncGetProtoByName* (hWnd: WinApi.HWND; wMsg: u_int; name: WinApi.PtrSTR; buf: WinApi.PtrSTR; buflen: INTEGER): WinApi.HANDLE;
	(*END WSAAsyncGetProtoByName;*)

	PROCEDURE [1] -WSAAsyncGetProtoByNumber* (hWnd: WinApi.HWND; wMsg: u_int; number: INTEGER; buf: WinApi.PtrSTR; buflen: INTEGER): WinApi.HANDLE;
	(*END WSAAsyncGetProtoByNumber;*)

	PROCEDURE [1] -WSAAsyncGetHostByName* (hWnd: WinApi.HWND; wMsg: u_int; name: WinApi.PtrSTR; buf: WinApi.PtrSTR; buflen: INTEGER): WinApi.HANDLE;
	(*END WSAAsyncGetHostByName;*)

	PROCEDURE [1] -WSAAsyncGetHostByAddr* (hWnd: WinApi.HWND; wMsg: u_int; addr: WinApi.PtrSTR; len: INTEGER; type: INTEGER; buf: WinApi.PtrSTR; buflen: INTEGER): WinApi.HANDLE;
	(*END WSAAsyncGetHostByAddr;*)

	PROCEDURE [1] -WSACancelAsyncRequest* (hAsyncTaskHandle: WinApi.HANDLE): INTEGER;
	(*END WSACancelAsyncRequest;*)

	PROCEDURE [1] -WSAAsyncSelect* (s: SOCKET; hWnd: WinApi.HWND; wMsg: u_int; lEvent: INTEGER): INTEGER;
	(*END WSAAsyncSelect;*)

	PROCEDURE [1] -WSAAccept* (s: SOCKET; VAR [nil] addr: sockaddr; VAR [nil] addrlen: INTEGER; lpfnCondition: CONDITIONPROC; dwCallbackData: INTEGER): SOCKET;
	(*END WSAAccept;*)

	PROCEDURE [1] -WSACloseEvent* (hEvent: WSAEVENT): WinApi.BOOL;
	(*END WSACloseEvent;*)

	PROCEDURE [1] -WSAConnect* (s: SOCKET; VAR [nil] name: sockaddr; namelen: INTEGER; VAR [nil] lpCallerData: WSABUF; VAR [nil] lpCalleeData: WSABUF; VAR [nil] lpSQOS: QOS; VAR [nil] lpGQOS: QOS): INTEGER;
	(*END WSAConnect;*)

	PROCEDURE [1] -WSACreateEvent* (): WSAEVENT;
	(*END WSACreateEvent;*)

	PROCEDURE [1] -WSADuplicateSocketA* (s: SOCKET; dwProcessId: INTEGER; VAR [nil] lpProtocolInfo: WSAPROTOCOL_INFOA): INTEGER;
	(*END WSADuplicateSocketA;*)

	PROCEDURE [1] -WSADuplicateSocketW* (s: SOCKET; dwProcessId: INTEGER; VAR [nil] lpProtocolInfo: WSAPROTOCOL_INFOW): INTEGER;
	(*END WSADuplicateSocketW;*)

	PROCEDURE [1] -WSADuplicateSocket* (s: SOCKET; dwProcessId: INTEGER; VAR [nil] lpProtocolInfo: WSAPROTOCOL_INFOA): INTEGER "WSADuplicateSocketA(s, dwProcessId, lpProtocolInfo)";
	(*END WSADuplicateSocket;*)

	PROCEDURE [1] -WSAEnumNetworkEvents* (s: SOCKET; hEventObject: WSAEVENT; VAR [nil] lpNetworkEvents: WSANETWORKEVENTS): INTEGER;
	(*END WSAEnumNetworkEvents;*)

	PROCEDURE [1] -WSAEnumProtocolsA* (VAR [nil] lpiProtocols: INTEGER; VAR [nil] lpProtocolBuffer: WSAPROTOCOL_INFOA; VAR [nil] lpdwBufferLength: INTEGER): INTEGER;
	(*END WSAEnumProtocolsA;*)

	PROCEDURE [1] -WSAEnumProtocolsW* (VAR [nil] lpiProtocols: INTEGER; VAR [nil] lpProtocolBuffer: WSAPROTOCOL_INFOW; VAR [nil] lpdwBufferLength: INTEGER): INTEGER;
	(*END WSAEnumProtocolsW;*)

	PROCEDURE [1] -WSAEnumProtocols* (VAR [nil] lpiProtocols: INTEGER; VAR [nil] lpProtocolBuffer: WSAPROTOCOL_INFOA; VAR [nil] lpdwBufferLength: INTEGER): INTEGER "WSAEnumProtocolsA(lpiProtocols, lpProtocolBuffer, lpdwBufferLength)";
	(*END WSAEnumProtocols;*)

	PROCEDURE [1] -WSAEventSelect* (s: SOCKET; hEventObject: WSAEVENT; lNetworkEvents: INTEGER): INTEGER;
	(*END WSAEventSelect;*)

	PROCEDURE [1] -WSAGetOverlappedResult* (s: SOCKET; VAR [nil] lpOverlapped: WSAOVERLAPPED; VAR [nil] lpcbTransfer: INTEGER; fWait: WinApi.BOOL; VAR [nil] lpdwFlags: SET): WinApi.BOOL;
	(*END WSAGetOverlappedResult;*)

	PROCEDURE [1] -WSAGetQOSByName* (s: SOCKET; VAR [nil] lpQOSName: WSABUF; VAR [nil] lpQOS: QOS): WinApi.BOOL;
	(*END WSAGetQOSByName;*)

	PROCEDURE [1] -WSAHtonl* (s: SOCKET; hostlong: u_long; VAR [nil] lpnetlong: u_long): INTEGER;
	(*END WSAHtonl;*)

	PROCEDURE [1] -WSAHtons* (s: SOCKET; hostshort: u_short; VAR [nil] lpnetshort: u_short): INTEGER;
	(*END WSAHtons;*)

	PROCEDURE [1] -WSAIoctl* (s: SOCKET; dwIoControlCode: INTEGER; lpvInBuffer: WinApi.PtrVoid; cbInBuffer: INTEGER; lpvOutBuffer: WinApi.PtrVoid; cbOutBuffer: INTEGER; VAR [nil] lpcbBytesReturned: INTEGER; VAR [nil] lpOverlapped: WSAOVERLAPPED; lpCompletionRoutine: WSAOVERLAPPED_COMPLETION_ROUTINE): INTEGER;
	(*END WSAIoctl;*)

	PROCEDURE [1] -WSAJoinLeaf* (s: SOCKET; VAR [nil] name: sockaddr; namelen: INTEGER; VAR [nil] lpCallerData: WSABUF; VAR [nil] lpCalleeData: WSABUF; VAR [nil] lpSQOS: QOS; VAR [nil] lpGQOS: QOS; dwFlags: SET): SOCKET;
	(*END WSAJoinLeaf;*)

	PROCEDURE [1] -WSANtohl* (s: SOCKET; netlong: u_long; VAR [nil] lphostlong: u_long): INTEGER;
	(*END WSANtohl;*)

	PROCEDURE [1] -WSANtohs* (s: SOCKET; netshort: u_short; VAR [nil] lphostshort: u_short): INTEGER;
	(*END WSANtohs;*)

	PROCEDURE [1] -WSARecv* (s: SOCKET; VAR [nil] lpBuffers: WSABUF; dwBufferCount: INTEGER; VAR [nil] lpNumberOfBytesRecvd: INTEGER; VAR [nil] lpFlags: INTEGER; VAR [nil] lpOverlapped: WSAOVERLAPPED; lpCompletionRoutine: WSAOVERLAPPED_COMPLETION_ROUTINE): INTEGER;
	(*END WSARecv;*)

	PROCEDURE [1] -WSARecvDisconnect* (s: SOCKET; VAR [nil] lpInboundDisconnectData: WSABUF): INTEGER;
	(*END WSARecvDisconnect;*)

	PROCEDURE [1] -WSARecvFrom* (s: SOCKET; VAR [nil] lpBuffers: WSABUF; dwBufferCount: INTEGER; VAR [nil] lpNumberOfBytesRecvd: INTEGER; VAR [nil] lpFlags: INTEGER; VAR [nil] lpFrom: sockaddr; VAR [nil] lpFromlen: INTEGER; VAR [nil] lpOverlapped: WSAOVERLAPPED; lpCompletionRoutine: WSAOVERLAPPED_COMPLETION_ROUTINE): INTEGER;
	(*END WSARecvFrom;*)

	PROCEDURE [1] -WSAResetEvent* (hEvent: WSAEVENT): WinApi.BOOL;
	(*END WSAResetEvent;*)

	PROCEDURE [1] -WSASend* (s: SOCKET; VAR [nil] lpBuffers: WSABUF; dwBufferCount: INTEGER; VAR [nil] lpNumberOfBytesSent: INTEGER; dwFlags: SET; VAR [nil] lpOverlapped: WSAOVERLAPPED; lpCompletionRoutine: WSAOVERLAPPED_COMPLETION_ROUTINE): INTEGER;
	(*END WSASend;*)

	PROCEDURE [1] -WSASendDisconnect* (s: SOCKET; VAR [nil] lpOutboundDisconnectData: WSABUF): INTEGER;
	(*END WSASendDisconnect;*)

	PROCEDURE [1] -WSASendTo* (s: SOCKET; VAR [nil] lpBuffers: WSABUF; dwBufferCount: INTEGER; VAR [nil] lpNumberOfBytesSent: INTEGER; dwFlags: SET; VAR [nil] lpTo: sockaddr; iTolen: INTEGER; VAR [nil] lpOverlapped: WSAOVERLAPPED; lpCompletionRoutine: WSAOVERLAPPED_COMPLETION_ROUTINE): INTEGER;
	(*END WSASendTo;*)

	PROCEDURE [1] -WSASetEvent* (hEvent: WSAEVENT): WinApi.BOOL;
	(*END WSASetEvent;*)

	PROCEDURE [1] -WSASocketA* (af: INTEGER; type: INTEGER; protocol: INTEGER; VAR [nil] lpProtocolInfo: WSAPROTOCOL_INFOA; g: GROUP; dwFlags: SET): SOCKET;
	(*END WSASocketA;*)

	PROCEDURE [1] -WSASocketW* (af: INTEGER; type: INTEGER; protocol: INTEGER; VAR [nil] lpProtocolInfo: WSAPROTOCOL_INFOW; g: GROUP; dwFlags: SET): SOCKET;
	(*END WSASocketW;*)

	PROCEDURE [1] -WSASocket* (af: INTEGER; type: INTEGER; protocol: INTEGER; VAR [nil] lpProtocolInfo: WSAPROTOCOL_INFOA; g: GROUP; dwFlags: SET): SOCKET "WSASocketA(af, type, protocol, lpProtocolInfo, g, dwFlags)";
	(*END WSASocket;*)

	PROCEDURE [1] -WSAWaitForMultipleEvents* (cEvents: INTEGER; VAR [nil] lphEvents: WSAEVENT; fWaitAll: WinApi.BOOL; dwTimeout: INTEGER; fAlertable: WinApi.BOOL): INTEGER;
	(*END WSAWaitForMultipleEvents;*)

	PROCEDURE [1] -WSARecvEx* (s: SOCKET; buf: WinApi.PtrSTR; len: INTEGER; VAR [nil] flags: SET): INTEGER;
	(*END WSARecvEx;*)

	PROCEDURE [1] -TransmitFile* (hSocket: SOCKET; hFile: WinApi.HANDLE; nNumberOfBytesToWrite: INTEGER; nNumberOfBytesPerSend: INTEGER; VAR [nil] lpOverlapped: WinApi.OVERLAPPED; VAR [nil] lpTransmitBuffers: TRANSMIT_FILE_BUFFERS; dwReserved: INTEGER): WinApi.BOOL;
	(*END TransmitFile;*)

	PROCEDURE [1] -AcceptEx* (sListenSocket: SOCKET; sAcceptSocket: SOCKET; lpOutputBuffer: WinApi.PtrVoid; dwReceiveDataLength: INTEGER; dwLocalAddressLength: INTEGER; dwRemoteAddressLength: INTEGER; VAR [nil] lpdwBytesReceived: INTEGER; VAR [nil] lpOverlapped: WinApi.OVERLAPPED): WinApi.BOOL;
	(*END AcceptEx;*)

	PROCEDURE [1] -GetAcceptExSockaddrs* (lpOutputBuffer: WinApi.PtrVoid; dwReceiveDataLength: INTEGER; dwLocalAddressLength: INTEGER; dwRemoteAddressLength: INTEGER; VAR [nil] LocalSockaddr: Ptrsockaddr; VAR [nil] LocalSockaddrLength: INTEGER; VAR [nil] RemoteSockaddr: Ptrsockaddr; VAR [nil] RemoteSockaddrLength: INTEGER);
	(*END GetAcceptExSockaddrs;*)

PROCEDURE -IOCPARM_MASK_F* (): INTEGER "0x7f";
PROCEDURE -IOC_IN_F* (): INTEGER "0x80000000";
PROCEDURE -_IOW* (x: CHAR; y: INTEGER; t: WinApi.PtrVoid) "(WinNet_IOC_IN_F()|(((long)sizeof(t)&WinNet_IOCPARM_MASK_F())<<16)|((x)<<8)|(y))";
PROCEDURE -FIONBIO* (): INTEGER "WinNet__IOW('f', 126, unsigned long)";

PROCEDURE -__NETRESOURCEA* "#define WinNet_NETRESOURCEA__typ NIL";
PROCEDURE -__NETRESOURCEW* "#define WinNet_NETRESOURCEW__typ NIL";
PROCEDURE - __CONNECTDLGSTRUCTA* "#define WinNet_CONNECTDLGSTRUCTA__typ NIL";
PROCEDURE -__CONNECTDLGSTRUCTW* "#define WinNet_CONNECTDLGSTRUCTW__typ NIL";
PROCEDURE -__DISCDLGSTRUCTA* "#define WinNet_DISCDLGSTRUCTA__typ NIL";
PROCEDURE -__DISCDLGSTRUCT* "#define WinNet_DISCDLGSTRUCTW__typ NIL";
PROCEDURE -__UNIVERSAL_NAME_INFOA* "#define WinNet_UNIVERSAL_NAME_INFOA__typ NIL";
PROCEDURE -__UNIVERSAL_NAME_INFOW* "#define WinNet_UNIVERSAL_NAME_INFOW__typ NIL";
PROCEDURE -__REMOTE_NAME_INFOA* "#define WinNet_REMOTE_NAME_INFOA__typ NIL";
PROCEDURE -__REMOTE_NAME_INFOW* "#define WinNet_REMOTE_NAME_INFOW__typ NIL";
PROCEDURE -__NETINFOSTRUCT* "#define WinNet_NETINFOSTRUCT__typ NIL";
PROCEDURE -__NETCONNECTINFOSTRUCT* "#define WinNet_NETCONNECTINFOSTRUCT__typ NIL";
PROCEDURE -__NCB* "#define WinNet_NCB__typ NIL";
PROCEDURE -__ADAPTER_STATUS* "#define WinNet_ADAPTER_STATUS__typ NIL";
PROCEDURE -__NAME_BUFFER* "#define WinNet_NAME_BUFFER__typ NIL";
PROCEDURE -__SESSION_HEADE* "#define WinNet_SESSION_HEADER__typ NIL";
PROCEDURE -__SESSION_BUFFER* "#define WinNet_SESSION_BUFFER__typ NIL";
PROCEDURE -__LANA_ENUM* "#define WinNet_LANA_ENUM__typ NIL";
PROCEDURE -__FIND_NAME_HEADER* "#define WinNet_FIND_NAME_HEADER__typ NIL";
PROCEDURE -__FIND_NAME_BUFFER* "#define WinNet_FIND_NAME_BUFFER__typ NIL";
PROCEDURE -__ACTION_HEADER* "#define WinNet_ACTION_HEADER__typ NIL";
PROCEDURE -__fd_set* "#define WinNet_fd_set__typ NIL";
PROCEDURE -__timeval* "#define WinNet_timeval__typ NIL";
PROCEDURE -__1__* "#define WinNet__1__typ NIL";
PROCEDURE -__in_addr* "#define WinNet_in_addr__typ NIL";
PROCEDURE -__hostent* "#define WinNet_hostent__typ NIL";
PROCEDURE -__netent* "#define WinNet_netent__typ NIL";
PROCEDURE -__servent* "#define WinNet_servent__typ NIL";
PROCEDURE -__protoent* "#define WinNet_protoent__typ NIL";
PROCEDURE -__sockaddr_in* "#define WinNet_sockaddr_in__typ NIL";
PROCEDURE -__WSADATA* "#define WinNet_WSADATA__typ NIL";
PROCEDURE -__sockaddr* "#define WinNet_sockaddr__typ NIL";
PROCEDURE -__sockproto* "#define WinNet_sockproto__typ NIL";
PROCEDURE -__linger* "#define WinNet_linger__typ NIL";
PROCEDURE -__WSAOVERLAPPED* "#define WinNet_WSAOVERLAPPED__typ NIL";
PROCEDURE -__WSABUF* "#define WinNet_WSABUF__typ NIL";
PROCEDURE -__FLOWSPEC* "#define WinNet_FLOWSPEC__typ NIL";
PROCEDURE -__QOS* "#define WinNet_QOS__typ NIL";
PROCEDURE -__WSANETWORKEVENTS* "#define WinNet_WSANETWORKEVENTS__typ NIL";
PROCEDURE -__WSAPROTOCOLCHAIN* "#define WinNet_WSAPROTOCOLCHAIN__typ NIL";
PROCEDURE -__WSAPROTOCOL_INFOA* "#define WinNet_WSAPROTOCOL_INFOA__typ NIL";
PROCEDURE -__WSAPROTOCOL_INFOW* "#define WinNet_WSAPROTOCOL_INFOW__typ NIL";
PROCEDURE -__TRANSMIT_FILE_BUFFERS* "#define WinNet_TRANSMIT_FILE_BUFFERS__typ NIL";

PROCEDURE -_init* "/*-noinit*/";

END WinNet.
